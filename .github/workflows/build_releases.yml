name: Build Releases

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual trigger for testing

env:
  BUILD_TYPE: Release
  QT_VERSION: '6.8.2'
  APP_ID: 'org.unabara.unabara'

jobs:
  build-linux-flatpak:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y flatpak flatpak-builder elfutils
        sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        sudo flatpak install -y flathub org.kde.Sdk//6.8
        sudo flatpak install -y org.kde.Platform//6.8
    
    - name: Set up Flatpak manifest
      run: |
        cat > org.unabara.unabara.yml << EOF
        app-id: ${{ env.APP_ID }}
        runtime: org.kde.Platform
        runtime-version: '6.8'
        sdk: org.kde.Sdk
        command: unabara
        finish-args:
          - --share=ipc
          - --socket=x11
          - --socket=wayland
          - --filesystem=host
          - --device=dri
        modules:
          - name: unabara
            buildsystem: cmake-ninja
            config-opts:
              - -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
            sources:
              - type: dir
                path: .
        EOF
    
    - name: Build Flatpak
      run: |
        flatpak-builder --repo=repo --force-clean build-dir org.unabara.unabara.yml
        flatpak build-bundle repo ${{ env.APP_ID }}.flatpak ${{ env.APP_ID }}
    
    - name: Upload Linux Flatpak Artifact
      uses: actions/upload-artifact@v4
      with:
        name: unabara-linux-flatpak
        path: ${{ env.APP_ID }}.flatpak
        
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.APP_ID }}.flatpak
        asset_name: unabara-linux.flatpak
        tag: ${{ github.ref }}
        overwrite: true

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        aqtversion: '==3.1.*'
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia qtpositioning qtwebview'
 
    - name: Install MSBuild
      run: choco install visualstudio2022buildtools --package-parameters "--add Microsoft.Component.MSBuild"

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '14.36'
        msbuild-architecture: x64
        
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --verbose
      
    - name: Package with windeployqt
      working-directory: ${{github.workspace}}/build
      run: |
        mkdir package
        if (Test-Path bin\${{env.BUILD_TYPE}}\unabara.exe) {
          copy bin\${{env.BUILD_TYPE}}\unabara.exe package\
        } elseif (Test-Path bin\unabara.exe) {
          copy bin\unabara.exe package\
        } else {
          Get-ChildItem -Recurse bin
          throw "Could not find unabara.exe in expected locations"
        }
        cd package
        $env:PATH = "$env:Qt6_DIR\bin;$env:PATH"
        windeployqt unabara.exe --release --no-translations --qmldir=../../src/ui/qml
        cd ..
        mv package ${{github.workspace}}/build/unabara-windows

    # - name: Create ZIP Archive (Direct)
    #   working-directory: ${{github.workspace}}/build
    #   run: |
    #     cd package
    #     7z a -tzip ${{github.workspace}}/build/unabara-windows.zip *

    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: unabara-windows
        path: ${{github.workspace}}/build/unabara-windows
        
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/build/unabara-windows
        tag: ${{ github.ref }}
        overwrite: true

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: mac
        target: desktop
        arch: clang_64
        
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Package with macdeployqt
      working-directory: ${{github.workspace}}/build
      run: |
        mkdir -p package/Unabara.app/Contents/MacOS/
        cp bin/unabara package/Unabara.app/Contents/MacOS/
        macdeployqt package/Unabara.app -dmg
        mv package/Unabara.dmg unabara-macos.dmg
        
    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: unabara-macos
        path: ${{github.workspace}}/build/unabara-macos.dmg
        
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/build/unabara-macos.dmg
        tag: ${{ github.ref }}
        overwrite: true